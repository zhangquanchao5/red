<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.red.dao.UserHistoryMapper" >
  <resultMap id="BaseResultMap" type="com.red.domain.UserHistory" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="red_id" property="redId" jdbcType="INTEGER" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="money" property="money" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="receive" property="receive" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="take_time" property="takeTime" jdbcType="TIMESTAMP" />
    <result column="wechat_id" property="wechatId" jdbcType="VARCHAR" />
    <result column="wechat_url" property="wechatUrl" jdbcType="VARCHAR" />
    <result column="wechat_nick" property="wechatNick" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, red_id, mobile, money, type, create_time,receive,take_time,wechat_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user_history
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="findNoReceiveList" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from user_history
    where mobile = #{mobile} and receive=2
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.red.domain.UserHistory" useGeneratedKeys="true" keyProperty="id" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_history (id, red_id, mobile, 
      money, type, create_time,receive,take_time,wechat_id,wechat_url,wechat_nick
      )
    values (#{id,jdbcType=INTEGER}, #{redId,jdbcType=INTEGER}, #{mobile,jdbcType=VARCHAR}, 
      #{money,jdbcType=INTEGER}, #{type,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{receive,jdbcType=TINYINT}, #{takeTime,jdbcType=TIMESTAMP}, #{wechatId,jdbcType=VARCHAR}
    , #{wechatUrl,jdbcType=VARCHAR}, #{wechatNick,jdbcType=VARCHAR}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.red.domain.UserHistory" useGeneratedKeys="true" keyProperty="id" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_history
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="redId != null" >
        red_id,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="money != null" >
        money,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="receive != null" >
        receive,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="wechatId != null" >
        wechat_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{id,jdbcType=INTEGER},
      <if test="redId != null" >
        #{redId,jdbcType=INTEGER},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="money != null" >
        #{money,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="receive != null" >
        #{receive,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="wechatId != null" >
        #{wechatId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.red.domain.UserHistory" >
    update user_history
    <set >
      <if test="redId != null" >
        red_id = #{redId,jdbcType=INTEGER},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="money != null" >
        money = #{money,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="receive != null" >
        receive = #{receive,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="takeTime != null" >
        take_time = #{takeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="wechatId != null" >
        wechat_id = #{wechatId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.red.domain.UserHistory" >
    update user_history
    set red_id = #{redId,jdbcType=INTEGER},
      mobile = #{mobile,jdbcType=VARCHAR},
      wechat_id = #{wechatId,jdbcType=VARCHAR},
      money = #{money,jdbcType=INTEGER},
      type = #{type,jdbcType=TINYINT},
      receive = #{receive,jdbcType=TINYINT},
      take_time = #{takeTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findRedIdCount" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select ifnull(sum(money),0)
    from user_history
    where red_id = #{redId,jdbcType=INTEGER}
  </select>

  <select id="findStatisticsHistoryNums" parameterType="com.red.common.apibean.UserHistoryPageReq" resultType="java.lang.Integer">
   select count(1) from ( select
    uh.mobile
    from user_history uh
    where 1 = 1
    and uh.type=2
    and uh.receive=1
    <if test="orgId != null">
      and EXISTS (select 1 from org_rule rule where rule.id=uh.red_id and rule.org_id=#{orgId})
    </if>

    <if test="redId != null">
      and uh.red_id=#{redId}
    </if>
    group by uh.mobile DESC) r

  </select>

  <select id="findStatisticsHistory" parameterType="com.red.common.apibean.UserHistoryPageReq" resultType="com.red.common.apibean.response.StatisticsRedResponse">
    select
    uh.mobile as mobile,count(1) as sums,sum(money) as moneys
    from user_history uh
    where 1 = 1
    and uh.type=2
    and uh.receive=1
    <if test="orgId != null">
      and EXISTS (select 1 from org_rule rule where rule.id=uh.red_id and rule.org_id=#{orgId})
    </if>

    <if test="redId != null">
      and uh.red_id=#{redId}
    </if>
    group by uh.mobile DESC
    limit #{pageStart},#{currentSize}
  </select>

  <select id="findStatisticsHistoryAll" parameterType="com.red.common.apibean.UserHistoryPageReq" resultType="com.red.common.apibean.response.StatisticsComResponse">
    select
    count(1) as redNums,sum(money) as redMoneys
    from user_history uh
    where 1 = 1
    and uh.type=2
    and uh.receive=1
    <if test="orgId != null">
      and EXISTS (select 1 from org_rule rule where rule.id=uh.red_id and rule.org_id=#{orgId})
    </if>

    <if test="redId != null">
      and uh.red_id=#{redId}
    </if>

  </select>

  <select id="findStatisticsHistoryCount" parameterType="com.red.common.apibean.UserHistoryPageReq" resultType="com.red.common.apibean.response.OrgOrRedResponse">
      select ifnull(sum(o.receive_red_seq),0)  as surplusSums,
      sum(o.red_count*o.average_price - ifnull((select sum(uh.money) from user_history uh where uh.red_id=o.id ),0))  as surplusMoneys
      from org_rule o where 1=1
    <if test="orgId != null">
     and o.org_id=#{orgId}
    </if>
    <if test="redId != null">
      and o.id=#{redId}
    </if>

  </select>


  <select id="findPageResponse" parameterType="com.red.common.apibean.UserHistoryPageReq" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user_history uh
    where 1 = 1
    <if test="mobile != null">
      and uh.mobile=#{mobile}
    </if>
    <if test="type != null">
      and uh.type=#{type}
    </if>
    <if test="timeBegin != null and timeBegin!='' and timeEnd!=null and timeEnd!=''">
      and uh.create_time between str_to_date(#{timeBegin},'%Y-%m-%d %H:%i') and
      str_to_date(#{timeEnd},'%Y-%m-%d %H:%i')
    </if>
    <if test="orgId != null">
      and EXISTS (select 1 from org_rule rule where rule.id=uh.red_id and rule.org_id=#{orgId})
    </if>
    <if test="redId != null">
      and uh.red_id=#{redId}
    </if>
    order by uh.create_time DESC
    limit #{pageStart},#{currentSize}
  </select>

  <select id="findPageCount" parameterType="com.red.common.apibean.UserHistoryPageReq" resultType="java.lang.Integer">
    select
    count(1)
    from user_history uh
    where uh.mobile=#{mobile}
    <if test="type != null">
      and uh.type=#{type}
    </if>
    <if test="timeBegin != null and timeBegin!='' and timeEnd!=null and timeEnd!=''">
      and uh.create_time between str_to_date(#{timeBegin},'%Y-%m-%d %H:%i') and
      str_to_date(#{timeEnd},'%Y-%m-%d %H:%i')
    </if>
    <if test="orgId != null">
      and EXISTS (select 1 from org_rule rule where rule.id=uh.red_id and rule.org_id=#{orgId})
    </if>
    <if test="redId != null">
      and uh.red_id=#{redId}
    </if>

  </select>


  <select id="findPhoneRedIdCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select count(1)
    from user_history
    where red_id = #{redId,jdbcType=INTEGER} and mobile=#{mobile} and type=2
  </select>

  <select id="statisticsHistoryDetail" parameterType="java.util.Map" resultType="com.red.common.apibean.response.UserHistoryResponse">
    select
    id,  mobile, money, create_time as createTime,wechat_id as wechatId,wechat_url as wechatUrl,wechat_nick as wechatNick
    from user_history uh
    where 1 = 1
    and uh.type=2
    and uh.receive=1
    <if test="mobile != null">
      and uh.mobile=#{mobile}
    </if>
    <if test="type!=null and type==1">
      and uh.red_id=#{redId}
    </if>
    <if test="type!=null and type==2">
      and EXISTS (select 1 from org_rule rule where rule.id=uh.red_id and rule.org_id=#{redId})
    </if>
    order by uh.create_time DESC

  </select>

</mapper>